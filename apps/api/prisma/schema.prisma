generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String         @id @default(uuid())
    name               String?
    email              String         @unique
    passwordHash       String?        @map("password_hash")
    avatarUrl          String?        @map("avatar_url")
    createdAt          DateTime       @default(now()) @map("created_at")
    updatedAt          DateTime       @updatedAt @map("updated_at")
    tokens             Token[]
    accounts           Account[]
    invites            Invite[]
    member_on          Member[]
    owns_organizations Organization[]
    owns_projects      Project[]

    @@map("users")
}

enum TokenType {
    PASSWORD_RECOVER
}

model Token {
    id        String    @id @default(uuid())
    type      TokenType
    createdAt DateTime  @default(now()) @map("created_at")
    user      User      @relation(fields: [userId], references: [id])
    userId    String    @map("user_id")

    @@map("tokens")
}

enum AccountProvider {
    GITHUB
}

model Account {
    id                String          @id @default(uuid())
    provider          AccountProvider
    providerAccountId String          @unique @map("provider_account_id")
    user              User            @relation(fields: [userId], references: [id])
    userId            String          @map("user_id")

    @@unique([provider, userId])
    @@map("accounts")
}

enum Role {
    ADMIN
    MEMBER
    BILLING
}

model Invite {
    id             String       @id @default(uuid())
    email          String
    role           Role
    createdAt      DateTime     @default(now()) @map("created_at")
    author         User?        @relation(fields: [userId], references: [id])
    userId         String?      @map("user_id")
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @map("organization_id")

    @@unique([email, organizationId])
    @@index([email])
    @@map("invites")
}

model Member {
    id             String       @id @default(uuid())
    role           Role         @default(MEMBER)
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @map("organization_id")
    user           User         @relation(fields: [userId], references: [id])
    userId         String       @map("user_id")

    @@unique([organizationId, userId])
    @@map("members")
}

model Organization {
    id                        String    @id @default(uuid())
    name                      String
    slug                      String    @unique
    domain                    String?   @unique
    shouldAttachUsersByDomain Boolean   @default(false) @map("should_attach_users_by_domain")
    avatarUrl                 String?   @map("avatar_url")
    createdAt                 DateTime  @default(now()) @map("created_at")
    updatedAt                 DateTime  @updatedAt @map("updated_at")
    owner                     User      @relation(fields: [ownerId], references: [id])
    ownerId                   String    @map("owner_id")
    invites                   Invite[]
    members                   Member[]
    projects                  Project[]

    @@map("organizations")
}

model Project {
    id             String       @id @default(uuid())
    name           String
    description    String
    slug           String       @unique
    avatarUrl      String?      @map("avatar_url")
    createdAt      DateTime     @default(now()) @map("created_at")
    updatedAt      DateTime     @updatedAt @map("updated_at")
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @map("organization_id")
    owner          User         @relation(fields: [ownerId], references: [id])
    ownerId        String       @map("owner_id")

    @@map("projects")
}
